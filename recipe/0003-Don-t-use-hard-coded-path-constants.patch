From f8ddd04a7dddf7548cac401fd34debb21d3f2411 Mon Sep 17 00:00:00 2001
From: Ryan Volz <ryan.volz@gmail.com>
Date: Thu, 3 Sep 2020 14:21:13 -0400
Subject: [PATCH 3/4] Don't use hard-coded path constants.

This replaces the path constants for the prefix, system configuration,
and preferences directories with a runtime prefix lookup based on the
gnuradio-runtime library location and relative paths from that.

Also use cmake-style paths instead of native paths for substitution to
avoid unescaped character problems. For relocatable prefix string
replacement, conda always substitutes in forward-slash paths anyway, so
it's just easier to use them from the start.
---
 CMakeLists.txt                       | 20 ++++++++++-----
 gnuradio-runtime/lib/CMakeLists.txt  |  4 ---
 gnuradio-runtime/lib/constants.cc.in | 37 +++++++++++++++-------------
 3 files changed, 34 insertions(+), 27 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index e2ac0ff5f..83f15f06c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -279,12 +279,20 @@ endif(ENABLE_PERFORMANCE_COUNTERS)
 ########################################################################
 # Variables replaced when configuring the package config files
 ########################################################################
-file(TO_NATIVE_PATH "${CMAKE_INSTALL_PREFIX}"           prefix)
-file(TO_NATIVE_PATH "\${prefix}"                        exec_prefix)
-file(TO_NATIVE_PATH "\${exec_prefix}/${GR_LIBRARY_DIR}" libdir)
-file(TO_NATIVE_PATH "\${prefix}/${GR_INCLUDE_DIR}"      includedir)
-file(TO_NATIVE_PATH "${SYSCONFDIR}"                     SYSCONFDIR)
-file(TO_NATIVE_PATH "${GR_PREFSDIR}"                    GR_PREFSDIR)
+file(TO_CMAKE_PATH "${CMAKE_INSTALL_PREFIX}"           prefix)
+file(TO_CMAKE_PATH "\${prefix}"                        exec_prefix)
+file(TO_CMAKE_PATH "\${exec_prefix}/${GR_LIBRARY_DIR}" libdir)
+file(TO_CMAKE_PATH "\${prefix}/${GR_INCLUDE_DIR}"      includedir)
+file(TO_CMAKE_PATH "${SYSCONFDIR}"                     SYSCONFDIR)
+file(TO_CMAKE_PATH "${GR_PREFSDIR}"                    GR_PREFSDIR)
+
+if(WIN32)
+    file(RELATIVE_PATH prefix_relative_to_lib "${prefix}/${GR_RUNTIME_DIR}" "${prefix}")
+else(WIN32)
+    file(RELATIVE_PATH prefix_relative_to_lib "${prefix}/${GR_LIBRARY_DIR}" "${prefix}")
+endif(WIN32)
+file(RELATIVE_PATH SYSCONFDIR_relative_to_prefix "${prefix}" "${SYSCONFDIR}")
+file(RELATIVE_PATH GR_PREFSDIR_relative_to_prefix "${prefix}" "${GR_PREFSDIR}")
 
 ########################################################################
 # On Apple only, set install name and use rpath correctly, if not already set
diff --git a/gnuradio-runtime/lib/CMakeLists.txt b/gnuradio-runtime/lib/CMakeLists.txt
index 223a51493..178cd3677 100644
--- a/gnuradio-runtime/lib/CMakeLists.txt
+++ b/gnuradio-runtime/lib/CMakeLists.txt
@@ -23,10 +23,6 @@ string(TIMESTAMP BUILD_DATE "%a, %d %b %Y %H:%M:%S" UTC)
 message(STATUS "Loading build date ${BUILD_DATE} into constants...")
 message(STATUS "Loading version ${VERSION} into constants...")
 
-#double escape for windows backslash path separators
-string(REPLACE "\\" "\\\\" prefix "${prefix}")
-string(REPLACE "\\" "\\\\" SYSCONFDIR "${SYSCONFDIR}")
-string(REPLACE "\\" "\\\\" GR_PREFSDIR "${GR_PREFSDIR}")
 
 #Generate the constants file, now that we actually know which components will be enabled.
 configure_file(
diff --git a/gnuradio-runtime/lib/constants.cc.in b/gnuradio-runtime/lib/constants.cc.in
index 0f316935d..2a5b6b210 100644
--- a/gnuradio-runtime/lib/constants.cc.in
+++ b/gnuradio-runtime/lib/constants.cc.in
@@ -14,6 +14,8 @@
 
 #include <stdlib.h>
 #include <gnuradio/constants.h>
+#include <boost/dll/runtime_symbol_info.hpp>
+#include <boost/filesystem/path.hpp>
 
 namespace gr {
 
@@ -24,33 +26,34 @@ namespace gr {
     const char *prefix = getenv("GR_PREFIX");
     if (prefix != NULL) return prefix;
 
-    return "@prefix@";
+    boost::filesystem::path prefix_rel_lib = "@prefix_relative_to_lib@";
+    boost::filesystem::path gr_runtime_lib_path = boost::dll::this_line_location();
+    //Normalize before decomposing path so result is reliable
+    boost::filesystem::path prefix_path =
+        gr_runtime_lib_path.lexically_normal().parent_path() / prefix_rel_lib;
+    return prefix_path.lexically_normal().string();
   }
 
   const std::string
   sysconfdir()
   {
-    //Provide the sysconfdir in terms of prefix()
-    //when the "GR_PREFIX" environment var is specified.
-    if (getenv("GR_PREFIX") != NULL)
-    {
-      return prefix() + "/@GR_CONF_DIR@";
-    }
-
-    return "@SYSCONFDIR@";
+    boost::filesystem::path sysconfdir_rel_prefix =
+        "@SYSCONFDIR_relative_to_prefix@";
+    boost::filesystem::path prefix_path = prefix();
+    boost::filesystem::path sysconfdir_path = prefix_path / sysconfdir_rel_prefix;
+
+    return sysconfdir_path.lexically_normal().string();
   }
 
   const std::string
   prefsdir()
   {
-    //Provide the prefsdir in terms of sysconfdir()
-    //when the "GR_PREFIX" environment var is specified.
-    if (getenv("GR_PREFIX") != NULL)
-    {
-      return sysconfdir() + "/@CMAKE_PROJECT_NAME@/conf.d";
-    }
-
-    return "@GR_PREFSDIR@";
+    boost::filesystem::path prefsdir_rel_prefix =
+        "@GR_PREFSDIR_relative_to_prefix@";
+    boost::filesystem::path prefix_path = prefix();
+    boost::filesystem::path prefsdir_path = prefix_path / prefsdir_rel_prefix;
+
+    return prefsdir_path.lexically_normal().string();
   }
 
   const std::string
-- 
2.25.1

